<%- include("../../views/partials/user/header") %>

    <div class="container mt-4">
        <h3 class="mt-3" style="color: #046963; margin-bottom:70px">Create User Address</h3>

        <form id="addressForm" method="POST" action="/addAddress" class="border-0 p-3" novalidate>
            <div class="row mb-50">
                <div class="form-group col-md-4">
                    <label for="addressType">Address Type:</label>
                    <input type="text" class="form-control border-3" id="addressType" name="addressType"
                        placeholder="Enter address type" required>
                </div>
                <div class="form-group col-md-4">
                    <label for="name">Name:</label>
                    <input type="text" class="form-control border-3" id="name" name="name" placeholder="Enter your name"
                        required>
                </div>
                <div class="form-group col-md-4">
                    <label for="city">City:</label>
                    <input type="text" class="form-control border-3" id="city" name="city" placeholder="Enter your city"
                        required>
                </div>
            </div>
            <div class="row mb-3">
                <div class="form-group col-md-4">
                    <label for="landMark">Landmark:</label>
                    <input type="text" class="form-control border-3" id="landMark" name="landMark"
                        placeholder="Enter landmark" required>
                </div>
                <div class="form-group col-md-4">
                    <label for="state">State:</label>
                    <input type="text" class="form-control border-3" id="state" name="state"
                        placeholder="Enter your state" required>
                </div>
                <div class="form-group col-md-4">
                    <label for="pincode">Pincode:</label>
                    <input type="number" class="form-control border-3" id="pincode" name="pincode"
                        placeholder="Enter pincode" required>
                </div>
            </div>
            <div class="row mb-3">
                <div class="form-group col-md-4">
                    <label for="phone">Phone:</label>
                    <input type="number" class="form-control border-3" id="phone" name="phone"
                        placeholder="Enter phone number" required>
                </div>
                <div class="form-group col-md-4">
                    <label for="altPhone">Alternate Phone:</label>
                    <input type="number" class="form-control border-3" id="altPhone" name="altPhone"
                        placeholder="Enter alternate phone number" required>
                </div>
            </div>
            <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
        </form>
    </div>
 
    <script>
        document.getElementById("addressForm").addEventListener("submit", function (event) {
            event.preventDefault(); 
    
            if (validateForm()) { 
                this.submit(); 
            }
        });
    
        function validateForm() {
            let isValid = true;
            const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
    
            requiredFields.forEach(field => {
                const input = document.getElementById(field);
                const errorElement = document.getElementById(field + '-error');
    
                if (errorElement) {
                    errorElement.remove();
                }
                input.classList.remove("is-invalid");
            });
    

            const namePattern = /^[A-Za-z\s]+$/;
            const pincodePattern = /^\d{6}$/;
            const phonePattern = /^\d{10}$/;
    
            const validations = [
                { field: "name", pattern: namePattern, message: "Name should contain alphabets only." },
                { field: "city", pattern: namePattern, message: "City should contain alphabets only." },
                { field: "landMark", pattern: namePattern, message: "Landmark should contain alphabets only." },
                { field: "state", pattern: namePattern, message: "State should contain alphabets only." },
                { field: "pincode", pattern: pincodePattern, message: "Pincode should be a 6-digit number." },
                { field: "phone", pattern: phonePattern, message: "Phone number should be a 10-digit number." },
                { field: "altPhone", pattern: phonePattern, message: "Alternate phone number should be a 10-digit number." }
            ];

            requiredFields.forEach(field => {
                const input = document.getElementById(field);
                const inputValue = input.value.trim();
    
                if (inputValue === "") {
                    showError(input, "This field is required.");
                    isValid = false;
                }
            });
    
            validations.forEach(({ field, pattern, message }) => {
                const input = document.getElementById(field);
                if (input.value.trim() !== "" && !pattern.test(input.value.trim())) {
                    showError(input, message);
                    isValid = false;
                }
            });
    
            const phone = document.getElementById("phone").value.trim();
            const altPhone = document.getElementById("altPhone").value.trim();
            if (phone !== "" && altPhone !== "" && phone === altPhone) {
                showError(document.getElementById("altPhone"), "Phone number and alternate phone number should be different.");
                isValid = false;
            }
    
            return isValid;
        }

        function showError(input, message) {
            const errorDiv = document.createElement("div");
            errorDiv.className = "text-danger small mt-1";
            errorDiv.id = input.id + "-error";
            errorDiv.textContent = message;
            input.classList.add("is-invalid");
            input.parentNode.appendChild(errorDiv);
        }

        document.querySelectorAll("input, textarea").forEach(input => {
            input.addEventListener("input", () => {
                const errorElement = document.getElementById(input.id + "-error");
                if (errorElement) {
                    errorElement.remove();
                    input.classList.remove("is-invalid");
                }
            });
        });
    
    </script>
    
    <%- include("../../views/partials/user/footer") %>