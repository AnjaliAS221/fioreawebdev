<%- include("../../views/partials/user/header") %>

    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Inter', sans-serif;
        }

        .checkout-container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
        }

        .checkout-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
            padding: 24px;
            margin-bottom: 24px;
        }

        .card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding-bottom: 16px;
            margin-bottom: 20px;
            border-bottom: 1px solid #e9ecef;
        }

        .card-header h4 {
            margin: 0;
            font-weight: 600;
            color: #2d3748;
        }

        .address-card {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .address-card:hover {
            border-color: #28a745;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.1);
        }

        .address-card.selected {
            border-color: #28a745;
            background-color: #f0fff4;
        }

        .product-item {
            display: flex;
            align-items: center;
            padding: 16px;
            border: 1px solid #e9ecef;
            border-radius: 12px;
            margin-bottom: 16px;
        }

        .product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
            margin-right: 16px;
        }

        .product-details {
            flex: 1;
        }

        .product-title {
            font-weight: 600;
            margin-bottom: 4px;
        }

        .product-variant {
            color: #6b7280;
            font-size: 0.9em;
        }

        .coupon-section {
            background-color: #fff;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 24px;
        }

        .coupon-input {
            display: flex;
            gap: 12px;
            margin-top: 12px;
        }

        .coupon-input input {
            flex: 1;
            padding: 10px 16px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
        }

        .payment-option {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .payment-option:hover {
            border-color: #28a745;
            background-color: #f8f9fa;
        }

        .payment-option.selected {
            border-color: #28a745;
            background-color: #f0fff4;
        }

        .payment-label {
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 0;
            cursor: pointer;
        }

        .btn-primary {
            background-color: #28a745;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #218838;
            transform: translateY(-1px);
        }

        .price-summary {
            background-color: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            margin-top: 24px;
        }

        .price-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            padding-bottom: 12px;
            border-bottom: 1px solid #e9ecef;
        }

        .price-row:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }

        .final-total {
            font-size: 1.2em;
            font-weight: 600;
            color: #2d3748;
        }

        .order-summary-sticky {
            position: sticky;
            top: 24px;
        }

        .add-address-btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background-color: #28a745;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            text-decoration: none;
            transition: all 0.2s ease;
        }

        .add-address-btn:hover {
            background-color: #218838;
            color: white;
            transform: translateY(-1px);
        }
    </style>

    <div class="checkout-container">
        <div class="row">
            <!-- Left Column -->
            <div class="col-lg-8">
                <!-- Address Selection Card -->
                <div class="checkout-card">
                    <div class="card-header">
                        <h4>Delivery Address</h4>
                        <a href="/addAddress" class="add-address-btn">
                            <i class="fi-rs-plus"></i>
                            Add New Address
                        </a>
                    </div>

                    <div id="address-container">
                        <div id="address-error" class="error-text">Please select a delivery address</div>
                        <% if (address.length> 0) { %>
                            <% address.forEach((addr, i)=> { %>
                                <div class="address-card" onclick="selectAddress(this, '<%= addr._id %>')">
                                    <input type="radio" name="selectedAddress" id="address-<%= i %>"
                                        value="<%= JSON.stringify(addr) %>" class="d-none">
                                    <div class="card-body">
                                        <strong class="d-block mb-2">
                                            <%= addr.addressType %>
                                        </strong>
                                        <p class="mb-1">
                                            <%= addr.name %>
                                        </p>
                                        <p class="mb-1">
                                            <%= addr.city %>, <%= addr.state %> - <%= addr.pincode %>
                                        </p>
                                        <p class="mb-0">
                                            <%= addr.phone %>
                                        </p>
                                    </div>
                                </div>
                                <% }); %>
                                    <% } else { %>
                                        <div class="alert alert-info">
                                            <p class="mb-0">No addresses available.</p>
                                        </div>
                                        <% } %>
                    </div>
                </div>

                <!-- Payment Methods Card -->
                <div class="checkout-card">
                    <div class="card-header">
                        <h4>Payment Method</h4>
                    </div>
                    <form id="orderForm" onsubmit="return handleFormSubmission(event)">
                        <div class="payment-options">
                            <div class="payment-option" onclick="selectPaymentMethod(this, 'COD')">
                                <input type="radio" name="payment_method" id="cod" value="COD" checked class="d-none">
                                <label class="payment-label" for="cod">
                                    <i class="fi-rs-money"></i>
                                    Cash on Delivery
                                </label>
                            </div>

                            <div class="payment-option" onclick="selectPaymentMethod(this, 'Online')">
                                <input type="radio" name="payment_method" id="online" value="Online" class="d-none">
                                <label class="payment-label" for="online">
                                    <i class="fi-rs-credit-card"></i>
                                    Online Payment
                                </label>
                            </div>
                        </div>

                        <!-- Hidden Fields -->
                        <input type="hidden" name="finalPrice" id="finalPrice">
                        <input type="hidden" name="coupon" id="coupon">
                        <input type="hidden" name="discount" id="discountapp">
                        <input type="hidden" name="cart" value='<%= JSON.stringify(cart ? cart.items : []) %>'>
                        <input type="hidden" name="totalPrice" id="totalPrice" value="<%= totalPrice %>">
                        <% if (product) { %>
                            <input type="hidden" name="singleProduct" value="<%= JSON.stringify(product) %>">
                            <% } %>
                                <input type="hidden" name="addressId" id="addressId">
                    </form>
                </div>
            </div>

            <!-- Right Column -->
            <div class="col-lg-4">
                <div class="order-summary-sticky">
                    <div class="checkout-card">
                        <div class="card-header">
                            <h4>Order Summary</h4>
                            
                        </div>

                        <!-- Products List -->
                        <div class="products-list">
                            <% if (cart && cart.items && cart.items.length > 0) { %>
                                <% cart.items.forEach(item => { %>
                                    <div class="product-item">
                                        <img src="/uploads/re-image/<%= item.productId.productImage[0] %>" 
                                            alt="<%= item.productId.productName %>" 
                                            class="product-image">
                                        <div class="product-details">
                                            <div class="product-title"><%= item.productId.productName %></div>
                                            <div class="product-variant">
                                                <% if (item.color) { %>Color: <%= item.color %><% } %>
                                                <% if (item.size) { %> | Size: <%= item.size %><% } %>
                                            </div>
                                            <div class="d-flex justify-content-between mt-2">
                                                <span>Qty: <%= item.quantity %></span>
                                                <span class="text-success">₹<%= item.totalPrice.toLocaleString() %></span>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } %>

                            <% if (product) { %>
                                <div class="product-item">
                                    <img src="/uploads/re-image/<%= product.productImage[0] %>" 
                                        alt="<%= product.productName %>" 
                                        class="product-image">
                                    <div class="product-details">
                                        <div class="product-title"><%= product.productName %></div>
                                        <div class="product-variant">
                                            <% if (product.color) { %>Color: <%= product.color %><% } %>
                                            <% if (product.size) { %> | Size: <%= product.size %><% } %>
                                        </div>
                                        <div class="d-flex justify-content-between mt-2">
                                            <span>Qty: <%= product.quantity %></span>
                                            <span class="text-success">₹<%= product.totalPrice.toLocaleString() %></span>
                                        </div>
                                    </div>
                                </div>
                            <% } %>
                        </div>

                        <!-- Coupon Section -->
                        <div class="coupon-section">
                            <div class="toggle_info">
                                <span>Have a coupon? <a href="#coupon" data-bs-toggle="collapse">Click here</a></span>
                            </div>
                            <div class="collapse" id="coupon">
                                <form id="coupon-form" class="mt-3">
                                    <input type="hidden" id="totalPriceAmt" name="totalPriceAmt"
                                        value="<%=JSON.stringify(totalPrice)%>">
                                    <div class="coupon-input">
                                        <input type="text" id="couponCode" name="couponCode"
                                            placeholder="Enter Coupon Code">
                                        <button type="submit" class="btn btn-primary" id="applyCouponBtn">Apply</button>
                                        <button type="button" class="btn btn-outline-danger" id="removeCouponBtn"
                                            style="display: none;" onclick="removeCoupon()">Remove</button>
                                    </div>
                                </form>
                                <a href="/coupons" class="btn btn-link mt-2">View Available Coupons</a>
                            </div>
                        </div>

                        <!-- Price Summary -->
                        <div class="price-summary">
                            <div class="price-row">
                                <span>Subtotal</span>
                                <span id="totalPriceElement">₹<%= totalPrice.toLocaleString() %></span>
                            </div>
                            <div class="price-row final-total">
                                <span>Total</span>
                                <span>₹<%= totalPrice.toLocaleString() %></span>
                            </div>
                        </div>

                        <button type="submit" form="orderForm" class="btn btn-primary w-100 mt-4">
                            Place Order
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <input type="hidden" id="productData" 
            data-product="<%- JSON.stringify(product) %>" 
        />
    </div>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        function syncData() {
            const couponCode = document.getElementById('couponCode').value || ''
            document.getElementById('coupon').value = couponCode
            const discount = document.getElementById('discount') ? document.getElementById('discount').value : 0
            document.getElementById('discountapp').value = discount;
            const finalAmount = document.getElementById('finalAmount') ? document.getElementById('finalAmount').value : "<%= totalPrice %>"
            document.getElementById('finalPrice').value = finalAmount
        }
        let globalDiscount = 0;
        function selectAddress(element, addressId) {
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });
            element.classList.add('selected');
            document.getElementById('addressId').value = addressId;
            element.querySelector('input[type="radio"]').checked = true;
        }


        async function handleFormSubmission(event) {
            event.preventDefault();
            await syncData()

            const form = document.getElementById('orderForm');
            const formData = new FormData(form);
            console.log(JSON.stringify(formData));

            const cartItems = JSON.parse(formData.get('cart') || '[]');
            const validCartItems = cartItems.every(item => item.variantId);
            
            if (!validCartItems) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Some products in your cart are missing variant information. Please try again or contact support.'
                });
                return;
            }
            const paymentMethod = formData.get('payment_method')
            if (paymentMethod === 'COD') {

                const codResponse = await fetch('/place-order-initial', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ...Object.fromEntries(formData),
                        paymentMethod: 'COD',
                        paymentStatus: 'Pending'
                    })
                });

                const result = await codResponse.json();
                console.log(result);
                if (!result.success) throw new Error(result.message || 'Failed to place COD order.');

                // Redirect to order confirmation page for COD orders
                window.location.href = `/order-confirmation?id=${result.orderId}`;
            } else if (paymentMethod === 'Online') {
                await processOnlinePayment(formData);
            }
        }

        async function processOnlinePayment(formData) {
            console.log(formData);
            try {

                const finalPriceElement = document.getElementById('finalPrice');
                let finalPrice;

                if (finalPriceElement && finalPriceElement.value) {
                    finalPrice = parseFloat(finalPriceElement.value);
                } else {
                    finalPrice = parseFloat('<%= totalPrice %>');
                }

                if (isNaN(finalPrice) || finalPrice <= 0) {
                    throw new Error('Invalid order amount');
                }

                // Validate address
                const addressId = formData.get('addressId');
                if (!addressId) {
                    throw new Error('Please select a delivery address');
                }

                const requestData = {
                    amount: finalPrice,
                    addressId: addressId,
                    cartItems: JSON.parse(formData.get('cart') || '[]').map(item => ({
                        ...item,
                        variantId: item.variantId || item.variant_id // Handle both possible names
                    })),
                    paymentMethod: 'Online'
                };

                const couponCode = formData.get('coupon');
                if (couponCode) {
                    requestData.couponCode = couponCode;
                    requestData.discount = parseFloat(formData.get('discount') || '0');
                }

                // Create order
                const response = await fetch('/create-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to create payment order');
                }

                const order = await response.json();
                if (!order.success) {
                    throw new Error(order.message || 'Failed to initialize payment');
                }

                await initializeRazorpay(order, formData);
            } catch (error) {
                console.error('Payment processing error:', error);
                Swal.fire({
                    title: 'Payment Error',
                    text: error.message || 'Failed to process payment',
                    icon: 'error'
                });
                throw error;
            }
        }

        async function initializeRazorpay(orderDetails, formData) {

            let retryCount = 0;
            const MAX_RETRIES = 3;
            const RETRY_DELAY = 2000;

            try {
                if (retryCount >= MAX_RETRIES) {
                    throw new Error('Maximum retry attempts reached');
                }


                if (retryCount > 0) {
                    await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
                }

                const initialOrderResponse = await fetch('/place-order-initial', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        ...Object.fromEntries(formData),
                        paymentMethod: 'Online',
                        paymentStatus: 'Pending'
                    })
                });


                if (!initialOrderResponse.ok) {
                    throw new Error('Failed to initialize order');
                }

                const initialOrderData = await initialOrderResponse.json();
                if (!initialOrderData.success) {
                    throw new Error(initialOrderData.message || 'Failed to initialize order');
                }


                const options = {
                    key: initialOrderData.key,
                    amount: orderDetails.amount,
                    currency: orderDetails.currency || 'INR',
                    order_id: orderDetails.id,
                    handler: async function (response) {
                        try {
                            const verifyResponse = await fetch('/verify-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    orderId: initialOrderData.orderId,
                                    paymentId: response.razorpay_payment_id,
                                    razorpayOrderId: response.razorpay_order_id,
                                    signature: response.razorpay_signature
                                })
                            });

                            const verifyResult = await verifyResponse.json();
                            if (!verifyResult.success) throw new Error(verifyResult.message || 'Payment verification failed');

                            const finalOrderResponse = await fetch('/place-order', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    orderId: initialOrderData.orderId,
                                    paymentSuccess: true,
                                    paymentDetails: {
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature
                                    }
                                })
                            });

                            const finalOrderData = await finalOrderResponse.json();
                            if (!finalOrderData.success) throw new Error(finalOrderData.message || 'Failed to finalize order');

                            window.location.href = `/order-confirmation?id=${initialOrderData.orderId}`;
                        } catch (error) {
                            await handlePaymentFailure(error, initialOrderData.orderId);
                        }
                    },
                    modal: {
                        ondismiss: async function () {
                            await handlePaymentFailure(
                                new Error('Payment cancelled by user'),
                                initialOrderData.orderId,
                                'cancelled'
                            );
                        }
                    },

                    retry: {
                        enabled: true,
                        max_count: 3
                    },
                    notes: {
                        orderId: initialOrderData.orderId
                    }
                };

                const razorpay = new Razorpay(options);
                razorpay.on('payment.failed', async function (response) {
                    await handlePaymentFailure(
                        new Error(response.error.description),
                        initialOrderData.orderId,
                        'failed',
                        response.error
                    );
                });
                razorpay.open();
            } catch (error) {
                await handlePaymentFailure(error);
            }
        }



        async function handlePaymentFailure(error, orderId, status = 'failed', paymentError = null) {
            console.error('Payment failed:', error);

            if (orderId) {
                try {
                    await fetch('/update-failed-order', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            orderId: orderId,
                            status: status,
                            error: error.message,
                            paymentError: paymentError
                        })
                    });
                } catch (updateError) {
                    console.error('Failed to update order status:', updateError);
                }
            }


            Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: error.message || 'Your payment could not be processed. Please try again.',
                showCancelButton: true,
                confirmButtonText: 'Try Again',
                cancelButtonText: 'Cancel',
            }).then((result) => {
                if (result.isConfirmed && orderId) {
                    fetch(`/retry-payment`, {
                        method: "post",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId })
                    })
                } else {

                    window.location.href = orderId
                        ? `/payment-failed?id=${orderId}&error=${encodeURIComponent(error.message)}`
                        : '/cart';
                }
            });
        }


        // Coupon Application
        document.getElementById('coupon-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const couponCode = document.getElementById('couponCode').value.trim();

            fetch('/applyCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ couponCode, totalPriceAmt: '<%=totalPrice%>' })
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if (data.success) {

                        globalDiscount = data.couponDiscount;

                        const totalPriceElement = document.getElementById('totalPriceElement');
                        const originalTotal = parseFloat(totalPriceElement.textContent.replace('₹', '').replace(',', ''));


                        const discountRow = document.createElement('div');
                        discountRow.className = 'd-flex justify-content-between mb-2';
                        discountRow.innerHTML = `
                <strong>Coupon Discount</strong>
                <strong class="text-success" id="discount">-₹${data.couponDiscount.toLocaleString()}</strong>
            `;

                        const finalTotalRow = document.createElement('div');
                        finalTotalRow.className = 'd-flex justify-content-between mb-2 final-total';
                        finalTotalRow.innerHTML = `
                <strong>Final Amount</strong>
                <strong id="finalAmount">₹${data.discountedPrice.toLocaleString()}</strong>
            `;

                        // Update hidden fields
                        document.getElementById('finalPrice').value = data.discountedPrice;
                        console.log(data.discountedPrice);
                        document.getElementById('coupon').value = couponCode;
                        document.getElementById('discountapp').value = data.couponDiscount;
                        // document.getElementById('totalPrice').value = data.discountedPrice;

                        // Update price summary display
                        const priceSummary = document.querySelector('.price-summary');
                        priceSummary.appendChild(discountRow);
                        priceSummary.appendChild(finalTotalRow);

                        // Update total price input
                        document.querySelector('input[name="totalPrice"]').value = data.discountedPrice;


                        document.getElementById('applyCouponBtn').style.display = 'none';
                        document.getElementById('removeCouponBtn').style.display = 'block';

                        Swal.fire({
                            icon: 'success',
                            title: 'Coupon Applied',
                            text: 'Coupon has been successfully applied to your order',
                            confirmButtonColor: '#28a745'
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Coupon Error',
                            text: data.message,
                            confirmButtonColor: '#dc3545'
                        });
                    }
                })
                .catch(error => {
                    console.error('Coupon Application Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while applying the coupon',
                        confirmButtonColor: '#dc3545'
                    });
                });
        });


        function syncData() {
            const couponCode = document.getElementById('couponCode').value || '';
            document.getElementById('coupon').value = couponCode;

            const discountElement = document.getElementById('discount');
            const discount = discountElement ?
                parseFloat(discountElement.textContent.replace('-₹', '').replace(',', '')) : 0;
            document.getElementById('discountapp').value = discount;

            const finalAmountElement = document.getElementById('finalAmount');
            const finalAmount = finalAmountElement ?
                parseFloat(finalAmountElement.textContent.replace('₹', '').replace(',', '')) :
                parseFloat('<%= totalPrice %>');
            document.getElementById('finalPrice').value = finalAmount;
        }

        function removeCoupon() {
            const couponCode = document.getElementById('couponCode').value.trim();

            if (!couponCode) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'No coupon code found',
                    confirmButtonColor: '#dc3545'
                });
                return;
            }

            fetch('/removeCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ couponCode })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {

                        document.getElementById('couponCode').value = '';


                        const priceSummary = document.querySelector('.price-summary');


                        const discountElements = priceSummary.querySelectorAll('.d-flex.justify-content-between');
                        discountElements.forEach((element, index) => {

                            if (index > 0) {
                                element.remove();
                            }
                        });


                        const totalPriceElement = document.getElementById('totalPriceElement');
                        const originalPrice = parseFloat('<%= totalPrice %>');
                        if (totalPriceElement) {
                            totalPriceElement.textContent = `₹${originalPrice.toLocaleString()}`;
                        }


                        document.getElementById('finalPrice').value = originalPrice;
                        document.getElementById('coupon').value = '';
                        document.getElementById('discountapp').value = '0';

                        document.getElementById('applyCouponBtn').style.display = 'block';
                        document.getElementById('removeCouponBtn').style.display = 'none';

                        Swal.fire({
                            icon: 'success',
                            title: 'Coupon Removed',
                            text: 'Coupon has been removed from your order',
                            confirmButtonColor: '#28a745'
                        });
                    } else {
                        throw new Error(data.message || 'Failed to remove coupon');
                    }
                })
                .catch(error => {
                    console.error('Remove Coupon Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to remove coupon. Please try again.',
                        confirmButtonColor: '#dc3545'
                    });
                });
        }

        function selectPaymentMethod(element, method) {
            document.querySelectorAll('.payment-option').forEach(option => {
                option.classList.remove('selected');
            });
            element.classList.add('selected');
            element.querySelector('input[type="radio"]').checked = true;
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

    <%- include("../../views/partials/user/footer") %>