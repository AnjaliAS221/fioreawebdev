<%- include("../../views/partials/user/header") %>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Inter', sans-serif;
        }

        .checkout-container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
        }

        .checkout-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
            padding: 24px;
            margin-bottom: 24px;
        }

        .card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding-bottom: 16px;
            margin-bottom: 20px;
            border-bottom: 1px solid #e9ecef;
        }

        .card-header h4 {
            margin: 0;
            font-weight: 600;
            color: #2d3748;
        }

        .address-card {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .address-card:hover {
            border-color: #28a745;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.1);
        }

        .address-card.selected {
            border-color: #28a745;
            background-color: #f0fff4;
        }

        .product-item {
            display: flex;
            align-items: center;
            padding: 16px;
            border: 1px solid #e9ecef;
            border-radius: 12px;
            margin-bottom: 16px;
        }

        .product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
            margin-right: 16px;
        }

        .product-details {
            flex: 1;
        }

        .product-title {
            font-weight: 600;
            margin-bottom: 4px;
        }

        .product-variant {
            color: #6b7280;
            font-size: 0.9em;
        }

        .coupon-section {
            background-color: #fff;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 24px;
        }

        .coupon-input {
            display: flex;
            gap: 12px;
            margin-top: 12px;
        }

        .coupon-input input {
            flex: 1;
            padding: 10px 16px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
        }

        .payment-option {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .payment-option:hover {
            border-color: #28a745;
            background-color: #f8f9fa;
        }

        .payment-option.selected {
            border-color: #28a745;
            background-color: #f0fff4;
        }

        .payment-label {
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 0;
            cursor: pointer;
        }

        .btn-primary {
            background-color: #28a745;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #218838;
            transform: translateY(-1px);
        }

        .price-summary {
            background-color: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            margin-top: 24px;
        }

        .price-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            padding-bottom: 12px;
            border-bottom: 1px solid #e9ecef;
        }

        .price-row:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }

        .final-total {
            font-size: 1.2em;
            font-weight: 600;
            color: #2d3748;
        }

        .order-summary-sticky {
            position: sticky;
            top: 24px;
        }

        .add-address-btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background-color: #28a745;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            text-decoration: none;
            transition: all 0.2s ease;
        }

        .add-address-btn:hover {
            background-color: #218838;
            color: white;
            transform: translateY(-1px);
        }
    </style>

    <div class="checkout-container">
        <div class="row">

            <div class="col-lg-8">

                <div class="checkout-card">
                    <div class="card-header">
                        <h4>Delivery Address</h4>
                        <a href="/addAddress" class="add-address-btn">
                            <i class="fi-rs-plus"></i>
                            Add New Address
                        </a>
                    </div>

                    <div id="address-container">
                        <div id="address-error" class="error-text">Please select a delivery address</div>
                        <% if (address.length> 0) { %>
                            <% address.forEach((addr, i)=> { %>
                                <div class="address-card" onclick="selectAddress(this, '<%= addr._id %>')">
                                    <input type="radio" name="selectedAddress" id="address-<%= i %>"
                                        value="<%= JSON.stringify(addr) %>" class="d-none">
                                    <div class="card-body">
                                        <strong class="d-block mb-2">
                                            <%= addr.addressType %>
                                        </strong>
                                        <p class="mb-1">
                                            <%= addr.name %>
                                        </p>
                                        <p class="mb-1">
                                            <%= addr.city %>, <%= addr.state %> - <%= addr.pincode %>
                                        </p>
                                        <p class="mb-0">
                                            <%= addr.phone %>
                                        </p>
                                    </div>
                                </div>
                                <% }); %>
                                    <% } else { %>
                                        <div class="alert alert-info">
                                            <p class="mb-0">No addresses available.</p>
                                        </div>
                                        <% } %>
                    </div>
                </div>


                <div class="checkout-card">
                    <div class="card-header">
                        <h4>Payment Method</h4>
                    </div>
                    <form id="orderForm" onsubmit="return handleFormSubmission(event)">
                        <div class="payment-options">
                            <div class="payment-option" onclick="selectPaymentMethod(this, 'COD')">
                                <input type="radio" name="payment_method" id="cod" value="COD" class="d-none">
                                <label class="payment-label" for="cod">
                                    <i class="fi-rs-money"></i>
                                    Cash on Delivery
                                </label>
                            </div>


                            <div class="payment-option" onclick="selectPaymentMethod(this, 'Online')">
                                <input type="radio" name="payment_method" id="online" value="Online" class="d-none">
                                <label class="payment-label" for="online">
                                    <i class="fi-rs-credit-card"></i>
                                    Online Payment
                                </label>
                            </div>

                            <div class="wallet-balance">
                                Wallet Balance: <span id="walletBalance">$100</span>
                            </div>

                            <div class="payment-option" onclick="selectPaymentMethod(this, 'Wallet')">
                                <input type="radio" name="payment_method" id="wallet" value="Wallet" class="d-none">
                                <label class="payment-label" for="wallet">
                                    <i class="fas fa-wallet"></i>
                                    Wallet Payment
                                </label>
                            </div>

                        </div>


                        <input type="hidden" name="finalPrice" id="finalPrice">
                        <input type="hidden" name="coupon" id="coupon">
                        <input type="hidden" name="discount" id="discountapp">
                        <input type="hidden" name="cart" value='<%= JSON.stringify(cart ? cart.items : []) %>'>
                        <input type="hidden" name="totalPrice" id="totalPrice" value="<%= totalPrice %>">
                        <% if (product) { %>
                            <input type="hidden" name="singleProduct" value="<%= JSON.stringify(product) %>">
                            <% } %>
                                <input type="hidden" name="addressId" id="addressId">
                    </form>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="order-summary-sticky">
                    <div class="checkout-card">
                        <div class="card-header">
                            <h4>Order Summary</h4>

                        </div>


                        <div class="products-list">
                            <% if (cart && cart.items && cart.items.length> 0) { %>
                                <% cart.items.forEach(item=> { %>
                                    <div class="product-item">
                                        <img src="/uploads/re-image/<%= item.productId.productImage[0] %>"
                                            alt="<%= item.productId.productName %>" class="product-image">
                                        <div class="product-details">
                                            <div class="product-title">
                                                <%= item.productId.productName %>
                                            </div>
                                            <div class="product-variant">
                                                <% if (item.color) { %>Color: <%= item.color %>
                                                        <% } %>
                                                            <% if (item.size) { %> | Size: <%= item.size %>
                                                                    <% } %>
                                            </div>
                                            <div class="d-flex justify-content-between mt-2">
                                                <span>Qty: <%= item.quantity %></span>
                                                <span class="text-success">₹<%= item.totalPrice.toLocaleString() %>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <% }); %>
                                        <% } %>

                                            <% if (product) { %>
                                                <div class="product-item">
                                                    <img src="/uploads/re-image/<%= product.productImage[0] %>"
                                                        alt="<%= product.productName %>" class="product-image">
                                                    <div class="product-details">
                                                        <div class="product-title">
                                                            <%= product.productName %>
                                                        </div>
                                                        <div class="product-variant">
                                                            <% if (product.color) { %>Color: <%= product.color %>
                                                                    <% } %>
                                                                        <% if (product.size) { %> | Size: <%=
                                                                                product.size %>
                                                                                <% } %>
                                                        </div>
                                                        <div class="d-flex justify-content-between mt-2">
                                                            <span>Qty: <%= product.quantity %></span>
                                                            <span class="text-success">₹<%=
                                                                    product.totalPrice.toLocaleString() %></span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <% } %>
                        </div>


                        <div class="coupon-section">
                            <div class="toggle_info">
                                <span>Have a coupon? <a href="#coupon" data-bs-toggle="collapse">Click here</a></span>
                            </div>
                            <div class="collapse" id="coupon">
                                <form id="coupon-form" class="mt-3">
                                    <input type="hidden" id="totalPriceAmt" name="totalPriceAmt"
                                        value="<%=JSON.stringify(totalPrice)%>">
                                    <div class="coupon-input">
                                        <input type="text" id="couponCode" name="couponCode"
                                            placeholder="Enter Coupon Code">
                                        <button type="submit" class="btn btn-primary" id="applyCouponBtn">Apply</button>
                                        <button type="button" class="btn btn-outline-danger" id="removeCouponBtn"
                                            style="display: none;" onclick="removeCoupon()">Remove</button>
                                    </div>
                                </form>
                                <a href="/coupons" class="btn btn-link mt-2">View Available Coupons</a>
                            </div>
                        </div>


                        <div class="price-summary">
                            <div class="price-row">
                                <span>Subtotal</span>
                                <span id="totalPriceElement">₹<%= totalPrice.toLocaleString() %></span>
                            </div>
                            <div class="price-row final-total">
                                <span>Total</span>
                                <span>₹<%= totalPrice.toLocaleString() %></span>
                            </div>
                        </div>

                        <button type="submit" form="orderForm" class="btn btn-primary w-100 mt-4">
                            Place Order
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <input type="hidden" id="productData" data-product="<%- JSON.stringify(product) %>" />

        <div class="modal fade" id="walletErrorModal" tabindex="-1" aria-labelledby="walletErrorModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-danger" id="walletErrorModalLabel">
                            <i class="fas fa-exclamation-triangle"></i> Payment Failed
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body text-center">
                        <p class="fw-semibold">Insufficient wallet balance.</p>
                        <p class="text-muted">Please add funds or use another payment method.</p>
                        <a href="/wallet" class="btn btn-primary w-100 mt-2">
                            <i class="fas fa-wallet"></i> Top-up Wallet
                        </a>
                        <button class="btn btn-secondary w-100 mt-2" data-bs-dismiss="modal">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                    </div>
                </div>
            </div>
        </div>


    </div>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        function syncData() {
            const couponCode = document.getElementById('couponCode').value || ''
            document.getElementById('coupon').value = couponCode
            const discount = document.getElementById('discount') ? document.getElementById('discount').value : 0
            document.getElementById('discountapp').value = discount;
            const finalAmount = document.getElementById('finalAmount') ? document.getElementById('finalAmount').value : "<%= totalPrice %>"
            document.getElementById('finalPrice').value = finalAmount
        }
        let globalDiscount = 0;

        function selectAddress(element, addressId) {
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });
            element.classList.add('selected');
            document.getElementById('addressId').value = addressId;
            element.querySelector('input[type="radio"]').checked = true;
        }


        async function handleFormSubmission(event) {
            event.preventDefault();

            try {
                await syncData();

                const form = document.getElementById('orderForm');
                const formData = new FormData(form);


                if (!formData.get('addressId')) {
                    Swal.fire({ icon: 'warning', title: 'Missing Address', text: 'Please select a delivery address' });
                    return;
                }

                if (!formData.get('payment_method')) {
                    Swal.fire({ icon: 'warning', title: 'Payment Method Required', text: 'Please select a payment method to proceed' });
                    return;
                }
                const paymentMethod = formData.get('payment_method');


                if (paymentMethod === 'COD') {
                    await processCODOrder(formData);
                } else if (paymentMethod === 'Online') {
                    await processOnlinePayment(formData);
                } else if (paymentMethod === 'Wallet') {
                    await processWalletPayment(formData);
                }

            } catch (error) {
                console.error("Error during form submission:", error);
            }
        }




        async function processCODOrder(formData) {
            try {
                const response = await fetch('/place-order-initial', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        form: Object.fromEntries(formData),
                        paymentMethod: 'COD',
                        paymentStatus: 'Pending',
                    })
                });

                const result = await response.json();

                if (!result.success) {
                    throw new Error(result.message || 'Failed to place COD order.');
                }

                window.location.href = `/order-confirmation?id=${result.orderId}`;
            } catch (error) {
                console.error("COD Order Error:", error);
                Swal.fire({ icon: 'error', title: 'Order Error', text: error.message });
            }
        }


        async function processOnlinePayment(formData) {
            try {


                const formattedItems = JSON.parse(formData.get('cart'));

                const orderRequestData = {
                    ...Object.fromEntries(formData),
                    paymentMethod: 'Online',
                    paymentStatus: 'Pending'
                };
                const initialOrderResponse = await fetch('/place-order-initial', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(orderRequestData)
                });

                const initialOrderData = await initialOrderResponse.json();
                if (!initialOrderData.success) {
                    throw new Error(initialOrderData.message || 'Failed to initialize order');
                }

                const razorpayRequestData = {
                    amount: parseFloat(formData.get('finalPrice')),
                    addressId: formData.get('addressId')
                };

                const razorpayResponse = await fetch('/create-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(razorpayRequestData)
                });

                const razorpayOrder = await razorpayResponse.json();

                if (!razorpayOrder.success) {
                    throw new Error(razorpayOrder.message || 'Failed to create Razorpay order');
                }
                await initializeRazorpay(razorpayOrder, initialOrderData);

            } catch (error) {
                console.error("Payment failure:", error);
                await handlePaymentFailure(error);
            }
        }

        async function processWalletPayment(formData) {
            try {
                const response = await fetch('/place-order-initial', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        form: Object.fromEntries(formData),
                        payment_method: 'Wallet',
                        paymentStatus: 'Paid',
                    })
                });

                const result = await response.json();

                if (!result.success) {
                    throw new Error(result.message || 'Failed to place wallet order.');
                }

                window.location.href = `/order-confirmation?id=${result.orderId}`;
            } catch (error) {
                console.error("Wallet Payment Error:", error);

                const walletModal = new bootstrap.Modal(document.getElementById('walletErrorModal'));
                walletModal.show();
            }
        }



        async function initializeRazorpay(orderDetails, initialOrderData) {
            const options = {
                key: initialOrderData.key,
                amount: orderDetails.amount,
                currency: orderDetails.currency,
                order_id: orderDetails.id,
                handler: async function (response) {
                    try {

                        const verifyResponse = await fetch('/verify-payment', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                orderId: initialOrderData.orderId,
                                paymentId: response.razorpay_payment_id,
                                razorpayOrderId: response.razorpay_order_id,
                                signature: response.razorpay_signature
                            })
                        });

                        const verifyResult = await verifyResponse.json();
                        if (!verifyResult.success) {
                            throw new Error(verifyResult.message || 'Payment verification failed');
                        }

                        const finalOrderResponse = await fetch('/place-order', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                orderId: initialOrderData.orderId,
                                paymentSuccess: true,
                                paymentDetails: {
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                }
                            })
                        });

                        const finalOrderResult = await finalOrderResponse.json();
                        if (!finalOrderResult.success) {
                            throw new Error(finalOrderResult.message || 'Failed to update order status');
                        }

                        window.location.href = `/order-confirmation?id=${initialOrderData.orderId}`;
                    } catch (error) {
                        await handlePaymentFailure(error, initialOrderData.orderId);
                    }
                },

                modal: {
                    ondismiss: async function () {
                        console.warn('Payment window closed by user.');
                        await handlePaymentFailure(
                            new Error('Payment process was canceled by user.'),
                            initialOrderData.orderId,
                            'failed',
                            'User_Cancelled'
                        );
                    }
                }
            };

            const razorpay = new Razorpay(options);
            razorpay.open();
        }



        async function handlePaymentFailure(error, orderId, status = 'failed', paymentError = null) {
            if (orderId) {
                try {
                    await fetch('/update-failed-order', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            orderId: orderId,
                            status: status,
                            error: error.message,
                            paymentError: paymentError,
                            failureReason: 'Payment processing failed'
                        })
                    });
                } catch (updateError) {
                    console.error('Failed to update order status:', updateError);
                }
            }

            Swal.fire({
                icon: 'warning',
                title: 'Payment Failed',
                text: error.message || 'Your payment could not be processed. Please try again.',
                showCancelButton: true,
                confirmButtonText: 'Try Again',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed && orderId) {
                    retryPayment(orderId);
                } else {
                    window.location.href = orderId
                        ? `/payment-failed?id=${orderId}&error=${encodeURIComponent(error.message)}`
                        : '/cart';
                }
            });
        }


        async function retryPayment(orderId) {
            try {
                const response = await fetch('/retry-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId })
                });

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || 'Failed to initiate retry payment');
                }

                const options = {
                    key: data.key,
                    amount: data.amount,
                    currency: 'INR',
                    order_id: data.orderId,
                    name: 'Fiorea',
                    description: 'Payment for Order',
                    prefill: {
                        name: data.customer.name,
                        email: data.customer.email,
                        contact: data.customer.phone
                    },
                    handler: async function (paymentResponse) {
                        await verifyPayment(paymentResponse, orderId);
                    }
                };

                const razorpay = new Razorpay(options);
                razorpay.open();
            } catch (error) {
                console.error('Retry payment failed:', error);
                Swal.fire({
                    icon: 'warning',
                    title: 'Retry Payment Failed',
                    text: 'Please try again later.',
                    confirmButtonText: 'OK'
                });
            }
        }


        document.getElementById('coupon-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const couponCode = document.getElementById('couponCode').value.trim();

            fetch('/applyCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ couponCode, totalPriceAmt: '<%=totalPrice%>' })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        globalDiscount = data.couponDiscount;

                        const totalPriceElement = document.getElementById('totalPriceElement');
                        const originalTotal = parseFloat(totalPriceElement.textContent.replace('₹', '').replace(',', ''));

                        const discountRow = document.createElement('div');
                        discountRow.className = 'd-flex justify-content-between mb-2';
                        discountRow.innerHTML = `
                    <strong>Coupon Discount</strong>
                    <strong class="text-success" id="discount">-₹${data.couponDiscount.toLocaleString()}</strong>
                `;

                        const finalTotalRow = document.createElement('div');
                        finalTotalRow.className = 'd-flex justify-content-between mb-2 final-total';
                        finalTotalRow.innerHTML = `
                    <strong>Final Amount</strong>
                    <strong id="finalAmount">₹${data.discountedPrice.toLocaleString()}</strong>
                `;

                        document.getElementById('finalPrice').value = data.discountedPrice;
                        document.getElementById('coupon').value = couponCode;
                        document.getElementById('discountapp').value = data.couponDiscount;

                        const priceSummary = document.querySelector('.price-summary');
                        priceSummary.appendChild(discountRow);
                        priceSummary.appendChild(finalTotalRow);

                        document.getElementById('applyCouponBtn').style.display = 'none';
                        document.getElementById('removeCouponBtn').style.display = 'block';

                        Swal.fire({
                            icon: 'success',
                            title: 'Coupon Applied',
                            text: 'Coupon has been successfully applied to your order',
                            confirmButtonColor: '#28a745'
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Coupon Error',
                            text: data.message,
                            confirmButtonColor: '#dc3545'
                        });
                    }
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while applying the coupon',
                        confirmButtonColor: '#dc3545'
                    });
                });
        });

        function syncData() {
            const couponCode = document.getElementById('couponCode').value || '';
            document.getElementById('coupon').value = couponCode;

            const discountElement = document.getElementById('discount');
            const discount = discountElement ?
                parseFloat(discountElement.textContent.replace('-₹', '').replace(',', '')) : 0;
            document.getElementById('discountapp').value = discount;

            const finalAmountElement = document.getElementById('finalAmount');
            const finalAmount = finalAmountElement ?
                parseFloat(finalAmountElement.textContent.replace('₹', '').replace(',', '')) :
                parseFloat('<%= totalPrice %>');
            document.getElementById('finalPrice').value = finalAmount;
        }

        function removeCoupon() {
            const couponCode = document.getElementById('couponCode').value.trim();

            fetch('/removeCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ couponCode })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('couponCode').value = '';
                        document.getElementById('coupon').value = '';
                        document.getElementById('discountapp').value = '0';
                        document.getElementById('finalPrice').value = data.totalPrice;
                        document.getElementById("discount").remove();


                        const priceSummary = document.querySelector('.price-summary');
                        const discountRows = priceSummary.querySelectorAll('.d-flex.justify-content-between');

                        discountRows.forEach((row, index) => {
                            if (index > 0) {
                                row.remove();
                            }
                        });

                        const totalPriceElement = document.getElementById('totalPriceElement');
                        if (totalPriceElement) {
                            totalPriceElement.textContent = `₹${data.totalPrice.toLocaleString()}`;
                        }

                        document.getElementById('applyCouponBtn').style.display = 'block';
                        document.getElementById('removeCouponBtn').style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Remove Coupon Error:', error);
                });
        }


        function selectPaymentMethod(element, method) {
            document.querySelectorAll('.payment-option').forEach(option => {
                option.classList.remove('selected');
            });
            element.classList.add('selected');
            element.querySelector('input[type="radio"]').checked = true;
        }


        document.addEventListener("DOMContentLoaded", function () {
            fetch("/get-wallet-balance")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("walletBalance").innerText = "₹" + data.balance;
                    checkWalletBalance(data.balance);
                })
                .catch(error => console.error("Error fetching wallet balance:", error));
        });

        function checkWalletBalance(balance) {
            let walletOption = document.getElementById("wallet");
            if (balance <= 0) {
                walletOption.disabled = true;
            }
        }


    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

    <%- include("../../views/partials/user/footer") %>