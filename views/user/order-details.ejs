<%- include('../partials/user/header') %>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #e3fdf5, #ffe6fa);
            padding: 0;
            margin: 0;
        }

        .order-container {
            max-width: 900px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.9);
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s ease;
        }

        .order-container:hover {
            transform: scale(1.01);
        }

        .order-card {
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            margin-bottom: 20px;
            padding: 20px;
            background: #fff;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .order-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
            font-size: 1rem;
        }

        .status-badge {
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .status-badge:hover {
            transform: scale(1.1);
        }

        .status-pending {
            background-color: #FFC107;
            color: white;
        }

        .status-processing {
            background-color: #2196F3;
            color: white;
        }

        .status-shipped {
            background-color: #4CAF50;
            color: white;
        }

        .status-delivered {
            background-color: #9C27B0;
            color: white;
        }

        .status-cancelled {
            background-color: #F44336;
            color: white;
        }

        .product-list {
            margin-top: 15px;
        }

        .product-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #f0f0f0;
            transition: background-color 0.3s ease;
        }

        .product-item:hover {
            background-color: #f9f9f9;
        }

        .product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 10px;
            margin-right: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .order-actions button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s ease;
        }

        .btn-cancel {
            background: #f44336;
            color: #fff;
        }

        .btn-cancel:hover {
            background: #d32f2f;
            transform: scale(1.05);
        }

        .btn-edit {
            background: #2196f3;
            color: #fff;
        }

        .btn-edit:hover {
            background: #1976d2;
            transform: scale(1.05);
        }

        @media (max-width: 768px) {
            .order-container {
                width: 95%;
            }

            .order-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .product-item {
                flex-direction: column;
                align-items: flex-start;
            }

            .product-image {
                margin-bottom: 10px;
            }
        }

        @media (min-width: 1024px) {
            .order-container {
                width: 80%;
                max-width: 1200px;
                padding: 40px;
                margin: 50px auto;
                border-radius: 15px;
                background: linear-gradient(135deg, #ffffff, #f8f8f8);
            }

            .order-header {
                flex-direction: row;
                align-items: center;
            }

            .order-header div {
                flex-grow: 1;
            }

            .status-badge {
                padding: 10px 15px;
                font-size: 1rem;
            }

            .product-list {
                padding: 10px 0;
                border-top: 1px solid #ddd;
            }

            .product-item {
                flex-direction: row;
                justify-content: space-between;
                align-items: center;
                padding: 15px;
            }

            .product-image {
                width: 100px;
                height: 100px;
                margin-right: 20px;
            }

            .order-actions {
                justify-content: flex-end;
            }

            .btn-cancel,
            .btn-edit {
                padding: 10px 20px;
                font-size: 1rem;
            }

            .order-card {
                display: flex;
                flex-direction: column;
                justify-content: space-between;
                transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
            }

            .order-card:hover {
                transform: translateY(-5px) scale(1.03);
                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
            }

            .product-image:hover {
                transform: scale(1.1);
                transition: transform 0.3s ease-in-out;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            }
        }

        .btn-edit i {
            margin-right: 5px;
        }

        .btn-edit {
            background: #2196f3;
            color: #fff;
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 0 5px;
            display: inline-flex;
            align-items: center;
        }

        .btn-edit:hover {
            background: #1976d2;
            transform: scale(1.05);
        }

        .pagination-area {
            margin-top: 30px;
        }

        .pagination {
            display: flex;
            justify-content: center;
            gap: 5px;
        }

        .page-item.active .page-link {
            background-color: #3BB77E;
            border-color: #3BB77E;
            color: #fff;
        }

        .page-link {
            padding: 8px 15px;
            color: #253D4E;
            background-color: #fff;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            text-decoration: none;
        }

        .page-link:hover {
            background-color: #f8f9fa;
            color: #3BB77E;
        }

        .product-details {
            flex-grow: 1;
            padding-right: 15px;
        }

        .product-item {
            display: flex;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: background-color 0.3s ease;
        }

        .product-item:hover {
            background-color: #f8f9fa;
        }

        .product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
            margin-right: 15px;
        }

        .modal .product-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
        }
    </style>
    <div class="container order-container">
        <h1 class="text-center mb-4">Order History</h1>

        <% if (orders && orders.length> 0) { %>
            <% orders.forEach(function(order) { %>
                <div class="order-card">
                    <div class="order-header">
                        <div>
                            <strong>Order #<%= order._id.toString().slice(-8).toUpperCase() %></strong>
                            <p class="text-muted">
                                Ordered on <%= new Date(order.createdAt).toLocaleDateString('en-US', { year: 'numeric' ,
                                    month: 'long' , day: 'numeric' }) %>
                            </p>
                        </div>
                        <span class="status-badge status-<%= order.status.toLowerCase() %>">
                            <%= order.status %>
                        </span>
                    </div>

                    <div class="product-list">
                        <% order.orderedItems.forEach(function(item) { %>
                            <div class="product-item">
                                <img src="/uploads/re-image/<%= item.product.productImage[0] %>"
                                    alt="<%= item.product.productName %>" class="product-image">
                                <div class="flex-grow-1">
                                    <div class="product-details">
                                        <h6 class="mb-1">
                                            <%= item.product.productName %>
                                        </h6>
                                        <p class="mb-0 text-muted">
                                            <% if (item.size) { %>
                                                <span class="me-2">Size: <%= item.size %></span>
                                                <% } %>
                                                    <% if (item.color) { %>
                                                        <span class="me-2">Color: <%= item.color %></span>
                                                        <% } %>
                                                            <span>Qty: <%= item.quantity %></span>
                                        </p>

                                    </div>
                                </div>
                                <strong>₹<%= (item.price).toFixed(2) %></strong>
                            </div>
                            <% }); %>
                    </div>


                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div>
                            <strong>Total: ₹<%= order.finalAmount.toFixed(2) %></strong>
                        </div>
                        <div class="order-actions">
                            <% if (order.status==='Pending' || (order.status==='Processing' &&
                                (order.paymentMethod==='Online' || order.paymentMethod==='Wallet' ))) { %>
                                <button class="btn-cancel" onclick="cancelOrder('<%= order._id %>')">
                                    Cancel Order
                                </button>
                                <% } %>


                                    <% if ((order.paymentStatus==='Failed' || order.paymentStatus==='Pending' ) &&
                                        order.paymentMethod !=='COD' ) { %>
                                        <button class="btn-edit" onclick="retryPayment('<%= order._id %>')">Retry
                                            Payment</button>
                                        <% } %>


                                            <% if (order.status=='Delivered' ) { %>
                                                <a href="/download-invoice/<%= order._id %>" class="btn-edit"
                                                    style="text-decoration: none; margin-left: 5px;">
                                                    <i class="fas fa-file-invoice"></i> Download Invoice
                                                </a>

                                                <% } %>

                                                    <button class="btn-edit"
                                                        onclick="showOrderDetails('<%= JSON.stringify(order) %>')">
                                                        View Details
                                                    </button>

                                                    <% if (order.status==='Delivered' && !order.returnRequested) { %>
                                                        <button class="btn-edit"
                                                            onclick="initiateReturn('<%= order._id %>')">
                                                            <i class="fas fa-undo"></i> Return Order
                                                        </button>
                                                        <% } %>
                        </div>
                    </div>
                </div>
                <% }); %>
                    <% } else { %>
                        <div class="text-center">
                            <p>No orders found.</p>
                        </div>
                        <% } %>
    </div>

    <% if (orders && orders.length> 0) { %>
        <div class="pagination-area mt-4">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <% if (hasPrevPage) { %>
                        <li class="page-item">
                            <a class="page-link" href="/order-history?page=<%= prevPage %>">
                                <i class="fi-rs-arrow-small-left"></i>
                            </a>
                        </li>
                        <% } %>

                            <% for(let i=1; i <=totalPages; i++) { %>
                                <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                    <a class="page-link" href="/order-history?page=<%= i %>">
                                        <%= i %>
                                    </a>
                                </li>
                                <% } %>

                                    <% if (hasNextPage) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="/order-history?page=<%= nextPage %>">
                                                <i class="fi-rs-arrow-small-right"></i>
                                            </a>
                                        </li>
                                        <% } %>
                </ul>
            </nav>
        </div>
        <% } %>


            <div class="modal fade order-details-modal" id="orderDetailsModal" tabindex="-1"
                aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body" id="orderDetailsModalBody">
                        </div>
                    </div>
                </div>
            </div>




            <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

            <script>
                async function cancelOrder(orderId) {
                    try {
                        const { value: formValues } = await Swal.fire({
                            title: 'Cancel Order',
                            html: `
                <select id="cancelReason" class="swal2-select" style="width: 100%; margin-bottom: 1rem; padding: 0.5rem;">
                    <option value="">Select a reason</option>
                    <option value="Changed my mind">Changed my mind</option>
                    <option value="Found better price elsewhere">Found better price elsewhere</option>
                    <option value="Ordered by mistake">Ordered by mistake</option>
                    <option value="Shipping time too long">Shipping time too long</option>
                    <option value="Other">Other</option>
                </select>
                <textarea id="cancelNote" class="swal2-textarea" placeholder="Additional notes (optional)"></textarea>
            `,
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Cancel Order',
                            preConfirm: () => {
                                const reason = document.getElementById('cancelReason').value;
                                const note = document.getElementById('cancelNote').value;

                                if (!reason) {
                                    Swal.showValidationMessage('Please select a reason for cancellation');
                                    return false;
                                }

                                return {
                                    reason: reason,
                                    note: note
                                }
                            }
                        });

                        if (formValues) {
                            const response = await fetch('/cancel-order', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    orderId,
                                    cancelReason: formValues.reason,
                                    cancelNote: formValues.note
                                })
                            });

                            const data = await response.json();

                            if (data.success) {
                                await Swal.fire(
                                    'Cancelled!',
                                    'Your order has been cancelled.',
                                    'success'
                                );
                                location.reload();
                            } else {
                                throw new Error(data.message || 'Failed to cancel order');
                            }
                        }
                    } catch (error) {
                        console.error('Cancel order error:', error);
                        Swal.fire(
                            'Error!',
                            error.message || 'Something went wrong. Please try again.',
                            'error'
                        );
                    }
                }
                function sanitizeString(str) {
                    return str.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
                }

                function showOrderDetails(orderData) {
                    try {

                        const sanitizedOrderData = typeof orderData === 'string' ? sanitizeString(orderData) : orderData;


                        const order = typeof sanitizedOrderData === 'string' ? JSON.parse(sanitizedOrderData) : sanitizedOrderData;


                        const modalBody = document.getElementById('orderDetailsModalBody');

                        const shippingAddress = order.address || null;


                        const orderDetails = {
                            id: order._id.toString().slice(-8).toUpperCase(),
                            orderId: order.orderId || 'N/A',
                            date: order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A',
                            paymentMethod: order.paymentMethod || 'N/A',
                            paymentStatus: order.paymentStatus || (order.status === 'Failed' ? 'Failed' : 'N/A'),
                            totalPrice: order.totalPrice || 0,
                            discount: order.discount || 0,
                            finalAmount: order.finalAmount || 0,
                            couponCode: order.couponCode || 'N/A',
                            status: order.status || 'N/A',
                            shippingAddress: shippingAddress,
                            items: order.orderedItems || []
                        };


                        let detailsHTML = `
            <div class="row">
                <div class="col-md-6">
                    <h6><strong>Order Information</strong></h6>
                    <p><strong>Order ID:</strong> Order #${orderDetails.id}</p>
                    <p><strong>Date:</strong> ${orderDetails.date}</p>
                    <p><strong>Payment Method:</strong> ${orderDetails.paymentMethod}</p>
                    <p><strong>Payment Status:</strong> ${orderDetails.paymentStatus}</p>
                    <div class="price-details">
                        <p><strong>Total Amount:</strong> ₹${orderDetails.totalPrice.toLocaleString()}</p>
                        ${orderDetails.discount > 0 ? `
                            <p><strong>Coupon Applied:</strong> ${orderDetails.couponCode}</p>
                            <p><strong>Discount:</strong> -₹${orderDetails.discount.toLocaleString()}</p>
                            <p><strong>Final Amount:</strong> ₹${orderDetails.finalAmount.toLocaleString()}</p>
                        ` : ''}
                    </div>
                    <p><strong>Status:</strong> ${orderDetails.status}</p>
                </div>
                <div class="col-md-6">
                    <h6><strong>Shipping Address</strong></h6>
                    <p>
                        ${orderDetails.shippingAddress ? `
                            ${orderDetails.shippingAddress.name || 'Name not provided'}<br>
                            ${orderDetails.shippingAddress.addressType ? `(${orderDetails.shippingAddress.addressType})` : ''}<br>
                            ${orderDetails.shippingAddress.landMark || 'No landmark provided'}<br>
                            ${orderDetails.shippingAddress.city || 'City not provided'}, 
                            ${orderDetails.shippingAddress.state || 'State not provided'} 
                            ${orderDetails.shippingAddress.pincode || 'Pincode not provided'}<br>
                            Phone: ${orderDetails.shippingAddress.phone || 'Not provided'}<br>
                            ${orderDetails.shippingAddress.altPhone ? `Alt Phone: ${orderDetails.shippingAddress.altPhone}` : ''}`
                                : 'No shipping address available'}
                    </p>
                </div>
            </div>
            <hr>
            <h6><strong>Ordered Items</strong></h6>
            <div class="row">
                ${orderDetails.items.length > 0 ?
                                orderDetails.items.map(item => `
                        <div class="col-md-12 mb-3">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <img src="/uploads/re-image/${item.product.productImage[0]}" 
                                         alt="${item.product.productName}" 
                                         class="product-image" style="width: 80px; height: 80px; object-fit: cover;">
                                </div>
                                <div class="flex-grow-1">
                                    <h6 class="mb-1">${item.product.productName}</h6>
                                    <div class="d-flex flex-wrap">
                                        ${item.size ? `<p class="mb-0 me-3"><strong>Size:</strong> ${item.size}</p>` : ''}
                                        ${item.color ? `<p class="mb-0 me-3"><strong>Color:</strong> ${item.color}</p>` : ''}
                                        <p class="mb-0 me-3"><strong>Quantity:</strong> ${item.quantity}</p>
                                        <p class="mb-0"><strong>Price:</strong> ₹${item.price.toLocaleString()}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `).join('<hr>') :
                                '<p>No items found in this order.</p>'
                            }
            </div>
        `;

                        modalBody.innerHTML = detailsHTML;

                        const orderDetailsModal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
                        orderDetailsModal.show();

                    } catch (error) {
                        console.error('Error in showOrderDetails:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Failed to load order details. Please try again later.',
                        });

                    }
                }


                function viewOrderDetails(orderId) {
                    window.location.href = `/order-details/${orderId}`;
                };

                document.addEventListener('DOMContentLoaded', () => {
                    window.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });
                });

                const orderCards = document.querySelectorAll('.order-card');
                orderCards.forEach(card => {
                    card.addEventListener('mouseover', () => {
                        card.style.transform = 'scale(1.02)';
                    });
                    card.addEventListener('mouseout', () => {
                        card.style.transform = 'scale(1)';
                    });
                });

                async function retryPayment(orderId) {
                    try {
                        const result = await Swal.fire({
                            title: 'Retry Payment',
                            text: 'Do you want to retry the payment for this order?',
                            icon: 'info',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Retry'
                        });

                        if (result.isConfirmed) {

                            const response = await fetch('/retry-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ orderId })
                            });

                            const data = await response.json();

                            if (data.success) {

                                const options = {
                                    key: data.key,
                                    amount: data.amount,
                                    currency: "INR",
                                    name: "Fiorea",
                                    description: "Retry Payment for Order",
                                    image: "img/header-logo.png",
                                    order_id: data.orderId,
                                    handler: async function (response) {

                                        const verifyResponse = await fetch('/verify-payment', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({
                                                orderId: orderId,
                                                paymentId: response.razorpay_payment_id,
                                                razorpayOrderId: response.razorpay_order_id,
                                                signature: response.razorpay_signature
                                            })
                                        });

                                        const verifyData = await verifyResponse.json();
                                        if (verifyData.success) {
                                            Swal.fire('Success!', 'Payment was successful!', 'success').then(() => {
                                                location.reload();
                                            });
                                        } else {
                                            Swal.fire('Error!', verifyData.message, 'error');
                                        }
                                    },
                                    prefill: {
                                        name: data.customer.name,
                                        email: data.customer.email,
                                        contact: data.customer.phone
                                    },
                                    theme: {
                                        color: "#3399cc"
                                    }
                                };

                                const rzp = new Razorpay(options);
                                rzp.open();
                            } else {
                                Swal.fire('Error!', data.message || 'Failed to initialize payment.', 'error');
                            }
                        }
                    } catch (error) {
                        console.error('Retry payment error:', error);
                        Swal.fire('Error!', 'Something went wrong. Please try again.', 'error');
                    }
                }

                function initiateReturn(orderId) {
                    Swal.fire({
                        title: 'Return Order',
                        html: `
            <select id="returnReason" class="swal2-select" style="width: 100%; margin-bottom: 1rem; padding: 0.5rem;">
                <option value="">Select a reason for return</option>
                <option value="Wrong size/fit">Wrong size/fit</option>
                <option value="Damaged/defective product">Damaged/defective product</option>
                <option value="Not as described">Not as described</option>
                <option value="Changed mind">Changed mind</option>
                <option value="Other">Other</option>
            </select>
        `,
                        showCancelButton: true,
                        confirmButtonText: 'Submit Return Request',
                        cancelButtonText: 'Cancel',
                        preConfirm: () => {
                            const reason = document.getElementById('returnReason').value;
                            if (!reason) {
                                Swal.showValidationMessage('Please select a reason for return');
                                return false;
                            }
                            return reason;
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const reason = result.value;

                            fetch('/return-order', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    orderId: orderId,
                                    reason: reason
                                })
                            })
                                .then(async response => {
                                    const data = await response.json();

                                    if (response.ok && data.success) {
                                        Swal.fire('Success!', data.message, 'success').then(() => {
                                            window.location.reload();
                                        });
                                    } else {
                                        throw new Error(data.message || 'Failed to submit return request');
                                    }
                                })
                                .catch(error => {
                                    console.error('Return order error:', error);
                                    Swal.fire(
                                        'Error!',
                                        error.message || 'Something went wrong. Please try again.',
                                        'error'
                                    );
                                });
                        }
                    });
                }


            </script>
            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

            <%- include('../partials/user/footer') %>