<%- include("../../views/partials/admin/header") %>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .content-main {
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .content-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .content-header input {
            width: 300px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            transition: box-shadow 0.3s ease;
        }

        .content-header input:focus {
            box-shadow: 0 0 5px #800000;
        }

        .card {
            border-radius: 10px;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

        .table-hover tbody tr:hover {
            background-color: #f1f1f1;
            transition: background-color 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #800000, #800000);
            border: none;
            transition: background 0.3s ease, transform 0.2s ease;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #800000, #800000);
            transform: scale(1.05);
        }

        .pagination-area .page-item.active .page-link {
            background-color: #800000;
            border-color: #800000;
        }

        .pagination-area .page-item .page-link {
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .pagination-area .page-item .page-link:hover {
            background-color: #800000;
            transform: scale(1.1);
        }

        .loading-spinner {
            display: none;
            width: 40px;
            height: 40px;
            border: 4px solid #ddd;
            border-top: 4px solid #800000;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 10px auto;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        .search-container {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .search-input {
            flex: 1;
        }
    </style>

    <section class="content-main">
        <div class="content-header">
            <div>
                <h2 class="content-title card-title">Stock Management</h2>
            </div>
            <div class="search-container">
                <input type="text" placeholder="Search product name" id="search-input"
                    class="form-control bg-white search-input">
                <button class="btn btn-primary" onclick="performSearch()">
                    Search
                </button>
            </div>
        </div>

        <div class="card mb-4">
            <header class="card-header">
                <div class="row gx-3">
                    <div class="col-lg-2 col-6 col-md-3">
                        <select class="form-select" onchange="handleCatChange(event)">
                            <option value="All">All Categories</option>
                            <option value="Embroidery">Embroidery</option>
                            <option value="Sustain Wear">Sustain Wear</option>
                            <option value="Occasional Wear">Occasional Wear</option>
                            <option value="Co-ords">Co-ords</option>
                        </select>
                    </div>
                </div>
            </header>

            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Product ID</th>
                                <th>Product Name</th>
                                <th>Category</th>
                                <th>Color</th>
                                <th>Size</th>
                                <th>Current Stock</th>
                                <th>Update Stock</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% for(let i=0; i < products.length; i++) { %>
                                <% products[i].variants.forEach((variant, variantIndex)=> { %>
                                    <% variant.sizes.forEach((size, sizeIndex)=> { %>
                                        <tr>
                                            <td>
                                                <%= products[i]._id%>
                                            </td>
                                            <td>
                                                <%= products[i].productName %>
                                            </td>
                                            <td>
                                                <%= products[i].category.name %>
                                            </td>
                                            <td>
                                                <%= variant.color %>
                                            </td>
                                            <td>
                                                <%= size.size %>
                                            </td>
                                            <td>
                                                <%= size.stock %>
                                            </td>
                                            <td>
                                                <input type="number" min="0" value="<%= size.stock %>"
                                                    id="stock-<%= products[i]._id %>-<%= variantIndex %>-<%= sizeIndex %>"
                                                    class="form-control d-inline-block" style="width: 100px;">
                                                <button class="btn btn-primary btn-sm ms-2"
                                                    onclick="updateStock('<%= products[i]._id.toString().slice(-8).toUpperCase() %>', '<%= variantIndex %>', '<%= sizeIndex %>')">
                                                    Update
                                                </button>
                                            </td>
                                        </tr>
                                        <% }); %>
                                            <% }); %>
                                                <% } %>
                        </tbody>
                    </table>
                </div>
                <div class="loading-spinner" id="loading-spinner"></div>
            </div>
        </div>

        <div class="pagination-area mt-15 mb-50 container">
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-start">
                    <% let startPage=Math.max(1, currentPage - 2); let endPage=Math.min(totalPages, startPage + 4); if
                        (endPage - startPage < 4) { startPage=Math.max(1, endPage - 4); } if (startPage> 1) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=1">1</a>
                        </li>
                        <% if (startPage> 2) { %>
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                            <% } %>
                                <% } %>
                                    <% for (let i=startPage; i <=endPage; i++) { %>
                                        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                            <a class="page-link" href="?page=<%= i %>">
                                                <%= i %>
                                            </a>
                                        </li>
                                        <% } %>
                                            <% if (endPage < totalPages) { %>
                                                <% if (endPage < totalPages - 1) { %>
                                                    <li class="page-item disabled"><span class="page-link">...</span>
                                                    </li>
                                                    <% } %>
                                                        <li class="page-item">
                                                            <a class="page-link" href="?page=<%= totalPages %>">
                                                                <%= totalPages %>
                                                            </a>
                                                        </li>
                                                        <% } %>

                </ul>
            </nav>
        </div>
    </section>

    <script>

        let currentSearchQuery = '';
        let currentCategory = 'All';

        function handleCatChange(e) {
            currentCategory = e.target.value;
        }

        function updateProductTable(products) {
    const productsTableBody = document.querySelector('table tbody');
    productsTableBody.innerHTML = '';

    if (!products || products.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td colspan="7" class="text-center py-4">
                <div class="alert alert-info mb-0">
                    No products found ${currentCategory !== 'All' ? `in category "${currentCategory}"` : ''} 
                    ${currentSearchQuery ? `matching "${currentSearchQuery}"` : ''}
                </div>
            </td>
        `;
        productsTableBody.appendChild(row);
        return;
    }

    products.forEach((product) => {
        product.variants.forEach((variant, variantIndex) => {
            variant.sizes.forEach((size, sizeIndex) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${product._id}</td>
                    <td>${product.productName}</td>
                    <td>${product.category.name}</td>
                    <td>${variant.color}</td>
                    <td>${size.size}</td>
                    <td>${size.stock}</td>
                    <td>
                        <input type="number" min="0" value="${size.stock}" 
                            id="stock-${product._id}-${variantIndex}-${sizeIndex}" 
                            class="form-control d-inline-block" 
                            style="width: 100px;">
                        <button 
                            class="btn btn-primary btn-sm ms-2 update-stock-btn" 
                            onclick="updateStock('${product._id}', ${variantIndex}, ${sizeIndex})"
                        >
                            Update
                        </button>
                    </td>
                `;
                productsTableBody.appendChild(row);
            });
        });
    });
}

        async function fetchProducts() {
            const spinner = document.getElementById('loading-spinner');
            spinner.style.display = 'block';

            try {
                const response = await fetch(`/admin/search-products?query=${currentSearchQuery}&category=${currentCategory}`);
                const data = await response.json();

                spinner.style.display = 'none';

                if (data.success) {
                    updateProductTable(data.products);
                } else {
                    updateProductTable([]);
                }
            } catch (error) {
                console.error('Error:', error);
                spinner.style.display = 'none';
                Swal.fire({
                    icon: 'error',
                    title: 'Search Failed',
                    text: 'Failed to fetch products. Please try again.',
                    confirmButtonColor: '#d33'
                });
            }
        }


        function performSearch() {
            currentSearchQuery = document.getElementById('search-input').value.trim();
            fetchProducts();
        }


        document.getElementById('search-input').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                performSearch();
            }
        });

        document.querySelector('.form-select').addEventListener('change', function () {
            currentCategory = this.value;
            fetchProducts();
        });


        function updateStock(productId, variantIndex, sizeIndex) {
    
    const spinner = document.getElementById('loading-spinner');
    spinner.style.display = 'block';

    const stockInputId = `stock-${productId}-${variantIndex}-${sizeIndex}`;
    
    const newStockElement = document.getElementById(stockInputId);
    
    if (!newStockElement) {
        spinner.style.display = 'none';
        return;
    }

    const newStock = parseInt(newStockElement.value);

    if (isNaN(newStock) || newStock < 0) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Stock',
            text: 'Please enter a valid non-negative number',
            confirmButtonColor: '#d33',
        });
        spinner.style.display = 'none';
        return;
    }

    const payload = {
        productId: productId,
        variantIndex: parseInt(variantIndex),
        sizeIndex: parseInt(sizeIndex),
        newStock: newStock
    };

    fetch('/admin/update-stock', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
    })
    .then(response => {
        return response.json();
    })
    .then(data => {
        spinner.style.display = 'none';
        if (data.success) {
            newStockElement.value = newStock;

            const stockCell = newStockElement.closest('tr').querySelector('td:nth-child(6)');
            if (stockCell) {
                stockCell.textContent = newStock;
            }
            Swal.fire({
                icon: 'success',
                title: 'Stock Updated',
                text: 'The stock has been updated successfully!',
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'OK',
            });
            newStockElement.value = newStock;
        } else {
            throw new Error(data.message || 'Failed to update stock');
        }
    })
    .catch(error => {
        console.error('Error in update stock:', error);
        spinner.style.display = 'none';
        Swal.fire({
            icon: 'error',
            title: 'Update Failed',
            text: error.message || 'Failed to update stock. Please try again.',
            confirmButtonColor: '#d33',
            confirmButtonText: 'Close',
        });
    });
}

document.addEventListener('click', function(e) {
    if (e.target.classList.contains('update-stock-btn')) {
        console.log('Button clicked:', e.target);
    }
});

        document.addEventListener('DOMContentLoaded', function () {
            fetchProducts();
        });

    </script>
    <%- include("../../views/partials/admin/footer") %>